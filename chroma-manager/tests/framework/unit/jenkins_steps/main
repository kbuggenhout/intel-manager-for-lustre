#!/bin/bash -e

make substs
. chroma-manager/tests/framework/utils/defaults.sh
. chroma-manager/tests/framework/utils/selective_auto_pass.sh

set_defaults false
check_for_autopass

# figure out which parallel invocation we might be
WORKSPACE_NUMBER=${WORKSPACE/$HOME\/workspace\/unit-tests@/}
WORKSPACE_NUMBER=${WORKSPACE_NUMBER%%/*}

if [ -n "$WORKSPACE_NUMBER" ]; then
    # use the database created for the workspace number
    ed <<EOF $CHROMA_DIR/chroma-manager/settings.py
/'NAME': 'chroma'/s/',/$WORKSPACE_NUMBER',/
w
q
EOF
fi

# remove any previous chroma-externals content
rm -rf chroma-externals .git/modules/chroma-externals

# Pip install requirements
cd $CHROMA_DIR/chroma-manager
make install_requirements

# disable threading for manager unit tests, evaluating database transactions will not
# work as expected if multiple threads are operating on the same database instance
export IML_DISABLE_THREADS=1

if $MEASURE_COVERAGE; then
  python manage.py test --with-xunit --xunit-file=$WORKSPACE/test_reports/chroma-manager-unit-test-results.xml --with-coverage tests/unit/ <<EOC
yes
EOC
  mv .coverage $WORKSPACE/.coverage.chroma_manager_unit_tests

  coverage run --source=. --omit=tests/* -m behave --junit --junit-directory $WORKSPACE/test_reports --format plain tests/feature/cli/features
  mv .coverage $WORKSPACE/.coverage.chroma_manager_behave_unit_tests

  unset IML_DISABLE_THREADS

  cd $WORKSPACE
  coverage combine
  coverage xml --include="$CHROMA_DIR/*" --omit="*junk.py,*/tests/*" --ignore-errors
else
  python manage.py test --with-xunit --xunit-file=$WORKSPACE/test_reports/chroma-manager-unit-test-results.xml tests/unit/ <<EOC
yes
EOC

  behave --junit --junit-directory $WORKSPACE/test_reports --format plain tests/feature/cli/features

  unset IML_DISABLE_THREADS
fi

set -e

# Check that all of the expected xml reports are present. (should be 8 when all these tests are working)
if [ $(ls -1 $WORKSPACE/test_reports | wc -l) -lt 8 ]; then
  exit 1
else
  exit 0
fi
